# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.firefox.options import Options
from selenium.common.exceptions import TimeoutException

class TestSmokeTest:
    def setup_method(self, method):
        options = Options()
        options.add_argument("--headless")
        self.driver = webdriver.Firefox(options=options)
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def wait_and_find(self, by, selector, timeout=10):
        try:
            WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((by, selector))
            )
            return self.driver.find_element(by, selector)
        except TimeoutException:
            return None

    def test_untitled(self):
        self.driver.get("http://127.0.0.1:5500/teton/1.6/index.html")
        self.driver.set_window_size(686, 691)

        def safe_click(element):
            if element is not None:
                element.click()

        def safe_send_keys(element, keys):
            if element is not None:
                element.send_keys(keys)

        element = self.wait_and_find(By.LINK_TEXT, "Join Us!")
        safe_click(element)
        element = self.wait_and_find(By.ID, "content")
        safe_click(element)
        element = self.wait_and_find(By.CSS_SELECTOR, ".header-title")
        safe_click(element)
        element = self.wait_and_find(By.CSS_SELECTOR, ".header-top")
        if element is not None:
            assert element.text == "Teton Idaho\nChamber of Commerce"
        element = self.wait_and_find(By.CSS_SELECTOR, ".header-title > h1")
        if element is not None:
            assert element.text == "Teton Idaho"
        element = self.wait_and_find(By.CSS_SELECTOR, ".header-title > h2")
        if element is not None:
            assert element.text == "Chamber of Commerce"
        element = self.wait_and_find(By.CSS_SELECTOR, ".header-top")
        safe_click(element)
        assert self.driver.title == "Teton Idaho CoC"
        element = self.wait_and_find(By.CSS_SELECTOR, "#hamburger-equiv > img")
        safe_click(element)
        element = self.wait_and_find(By.LINK_TEXT, "Home")
        safe_click(element)
        element = self.wait_and_find(By.CSS_SELECTOR, ".spotlight1 > h4")
        if element is not None:
            assert element.text == "Teton Elementary"
        element = self.wait_and_find(By.CSS_SELECTOR, ".spotlight2 > h4")
        if element is not None:
            assert element.text == "Teton Post Office"
        element = self.wait_and_find(By.LINK_TEXT, "Join Us!")
        if element is not None:
            assert element.text == "Join Us!"
        element = self.wait_and_find(By.CSS_SELECTOR, ".join-wizard-main")
        safe_click(element)
        element = self.wait_and_find(By.LINK_TEXT, "Directory")
        safe_click(element)
        element = self.wait_and_find(By.ID, "directory-grid")
        safe_click(element)
        element = self.wait_and_find(By.LINK_TEXT, "Directory")
        if element is not None:
            assert element.text == "Directory"
        element = self.wait_and_find(By.ID, "directory-grid")
        if element is not None:
            assert element.text == "GRID"
        safe_click(element)
        element = self.wait_and_find(By.CSS_SELECTOR, ".gold-member:nth-child(9) > p:nth-child(2)")
        if element is not None:
            assert element.text == "Teton Turf and Tree"
        element = self.wait_and_find(By.ID, "directory-list")
        safe_click(element)
        element = self.wait_and_find(By.CSS_SELECTOR, ".gold-member:nth-child(9) > p:nth-child(2)")
        if element is not None:
            assert element.text == "Teton Turf and Tree"
        element = self.wait_and_find(By.LINK_TEXT, "Join")
        safe_click(element)
        element = self.wait_and_find(By.NAME, "fname")
        safe_click(element)
        elements = self.driver.find_elements(By.NAME, "fname")
        if element is not None:
            assert len(elements) > 0
        safe_send_keys(element, "Timi")
        element = self.wait_and_find(By.NAME, "lname")
        safe_click(element)
        safe_send_keys(element, "Daramola")
        element = self.wait_and_find(By.NAME, "bizname")
        safe_click(element)
        safe_send_keys(element, "Timi Daramola Pty")
        element = self.wait_and_find(By.NAME, "biztitle")
        safe_click(element)
        safe_send_keys(element, "Software Developer")
        element = self.wait_and_find(By.NAME, "submit")
        safe_click(element)
        element = self.wait_and_find(By.NAME, "email")
        safe_click(element)
        element = self.wait_and_find(By.LINK_TEXT, "Admin")
        safe_click(element)
        element = self.wait_and_find(By.ID, "username")
        safe_click(element)
        elements = self.driver.find_elements(By.ID, "username")
        if element is not None:
            assert len(elements) > 0
        safe_click(element)
        safe_send_keys(element, "timi")
        element = self.wait_and_find(By.ID, "password")
        safe_send_keys(element, "timi")
        element = self.wait_and_find(By.CSS_SELECTOR, ".mysubmit:nth-child(4)")
        safe_click(element)
        element = self.wait_and_find(By.CSS_SELECTOR, ".errorMessage")
        if element is not None:
            assert element.text == "Invalid username and password."
        element = self.wait_and_find(By.NAME, "email")
        safe_click(element)
        elements = self.driver.find_elements(By.NAME, "email")
        if element is not None:
            assert len(elements) > 0
        element = self.wait_and_find(By.LINK_TEXT, "Directory")
        safe_click(element)
        element = self.wait_and_find(By.ID, "directory-grid")
        safe_click(element)

    def test_homepage_title(self):
        self.driver.get("http://127.0.0.1:5500/teton/1.6/index.html")
        assert "Teton Idaho" in self.driver.title

    def test_join_us_button_exists(self):
        self.driver.get("http://127.0.0.1:5500/teton/1.6/index.html")
        element = self.wait_and_find(By.LINK_TEXT, "Join Us!")
        assert element is not None

    def test_directory_grid_switch(self):
        self.driver.get("http://127.0.0.1:5500/teton/1.6/index.html")
        element = self.wait_and_find(By.LINK_TEXT, "Directory")
        if element is not None:
            element.click()
        grid_btn = self.wait_and_find(By.ID, "directory-grid")
        if grid_btn is not None:
            grid_btn.click()
        grid_text = self.wait_and_find(By.ID, "directory-grid")
        if grid_text is not None:
            assert grid_text.text == "GRID"

    def test_admin_login_error(self):
        self.driver.get("http://127.0.0.1:5500/teton/1.6/index.html")
        admin_link = self.wait_and_find(By.LINK_TEXT, "Admin")
        if admin_link is not None:
            admin_link.click()
        username = self.wait_and_find(By.ID, "username")
        password = self.wait_and_find(By.ID, "password")
        login_btn = self.wait_and_find(By.CSS_SELECTOR, ".mysubmit:nth-child(4)")
        if username is not None and password is not None and login_btn is not None:
            username.send_keys("wronguser")
            password.send_keys("wrongpass")
            login_btn.click()
            error = self.wait_and_find(By.CSS_SELECTOR, ".errorMessage")
            if error is not None:
                assert "Invalid username" in error.text

